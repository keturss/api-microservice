version: "3.9"

services:
  tickets:
    build: 
      context: ./api-tickets/
      dockerfile: Dockerfile.prod
    ports:
      - "3003:3000"
    networks:
      - backend
    environment:
      PORT: 3000
      DB_HOST: mongo
      DB_PORT: 27017
      DB_DATABASE: dev
    restart: "unless-stopped"

  event:
    build: 
      context: ./api-events
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - "3002:3000"
    networks:
      - backend
    environment:
      PORT: 3000
      DB_HOST: mongo
      DB_PORT: 27017
      DB_DATABASE: dev

  gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - "3000:3000"
    networks:
      - backend
    environment:
      PORT: 3000
      DB_HOST: mongo
      DB_PORT: 27017
      DB_DATABASE: dev
      RABBIT: amqp://rabbitmq
      URLEVENT: http://event:3000/events
      URLTICKET: http://tickets:3000/tickets
      URLUSER: http://users:3000/users
      URLAUTH: http://users:3000

  users:
    build: 
      context: ./api-users
      dockerfile: Dockerfile.prod
    restart: always
    ports:
      - "3001:3000"
    networks:
      - backend
    environment:
      PORT: 3000
      DB_HOST: mongo
      DB_PORT: 27017
      DB_DATABASE: dev

  mongo:
    container_name: mongo
    image: mongo
    networks:
      - backend
    ports:
      - "27017:27017"
    environment:
      DB_HOST: localhost
      DB_PORT: 27017
      DB_DATABASE: dev

  notification:
    container_name: notification
    build: ./notification
    restart: always
    networks:
      - backend    
    links:
      - rabbitmq
    environment:
      - RABBIT=amqp://rabbitmq

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11-management
    restart: always
    networks:
      - backend
    ports:
      - "5672:5672"
      - "15672:15672"

networks:
  backend:
    driver: bridge